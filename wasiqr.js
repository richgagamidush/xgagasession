const PastebinAPI = require('pastebin-js'),
pastebin = new PastebinAPI('EMWTMkQAVfJa9kM-MRUrxd5Oku1U7pgL')
const {makeid} = require('./id');
const QRCode = require('qrcode');
const express = require('express');
const path = require('path');
const fs = require('fs');
let router = express.Router()
const pino = require("pino");
const {
	default: Wasi_Tech,
	useMultiFileAuthState,
	jidNormalizedUser,
	Browsers,
	delay,
	makeInMemoryStore,
} = require("@whiskeysockets/baileys");

function removeFile(FilePath) {
	if (!fs.existsSync(FilePath)) return false;
	fs.rmSync(FilePath, {
		recursive: true,
		force: true
	})
};
const {
	readFile
} = require("node:fs/promises")
router.get('/', async (req, res) => {
	const id = makeid();
	async function WASI_MD_QR_CODE() {
		const {
			state,
			saveCreds
		} = await useMultiFileAuthState('./temp/' + id)
		try {
			let Qr_Code_By_Wasi_Tech = Wasi_Tech({
				auth: state,
				printQRInTerminal: false,
				logger: pino({
					level: "silent"
				}),
				browser: Browsers.macOS("Desktop"),
			});

			Qr_Code_By_Wasi_Tech.ev.on('creds.update', saveCreds)
			Qr_Code_By_Wasi_Tech.ev.on("connection.update", async (s) => {
				const {
					connection,
					lastDisconnect,
					qr
				} = s;
				if (qr) await res.end(await QRCode.toBuffer(qr));
				if (connection == "open") {
					await delay(5000);
					let data = fs.readFileSync(__dirname + `/temp/${id}/creds.json`);
					await delay(800);
				   let b64data = Buffer.from(data).toString('base64');
				   let session = await Qr_Code_By_Wasi_Tech.sendMessage(Qr_Code_By_Wasi_Tech.user.id, { text: '”º…¢«ü…¢«ü‚Ç¨‚Ç¨>”º…Æ÷Ö»∂ùô∂ùô∞ùô∂ùô∞-ùôºùô≥;;;=>' + b64data });
	
				   let TREX_MD_TEXT = `
‚ùè ÔΩáÔΩÅÔΩáÔΩÅ ÔΩçÔΩÑ ÔΩìÔΩÖÔΩìÔΩìÔΩâÔΩèÔΩé ÔΩìÔΩïÔΩÉÔΩÉÔΩÖÔΩìÔΩìÔΩÜÔΩïÔΩåÔΩåÔΩô ÔΩÉÔΩèÔΩéÔΩéÔΩÖÔΩÉÔΩîÔΩÖÔΩÑ ‚ùè

‚ùè  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö ·¥õ ú·¥á “ì…™ Äs·¥õ s·¥õ·¥á·¥ò , ·¥Ñ·¥è·¥ò è ·¥õ ú·¥á ·¥Ä ô·¥è·¥†·¥á s·¥áss…™·¥è…¥ ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö …™·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ö·¥á·¥ò ü·¥è è·¥á Ä ·¥è Ä ·¥Ö·¥á·¥ò ü·¥è è ·¥è…¥  ú·¥á Ä·¥è·¥ã·¥ú‚ùè

‚ùè“ì·¥è ü ü·¥è·¥°  ô·¥è·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü “ì·¥è Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás  ‚ùè
[ üîòhttps://whatsapp.com/channel/0029VasnifMFi8xW4Mqysn2Füîò]
‚ùè·¥Ä…¥ è ·¥Ö…™“ì“ì…™·¥Ñ·¥ú ü·¥õ…™·¥ás ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä‚ùè

> *ùö†ùöëùöäùöùùöúùöäùöôùöô‚áò* 
https://wa.me/254112291443

> *ùô∏ùöóùöúùöùùöäùöêùöõùöäùöñ‚áò* 
https://www.instagram.com/richgagamidush

> *ùöùùöéùöïùöéùöêùöõùöäùöñ‚áò*
t.me/richardgaga]

> …¢·¥á…¥·¥Ä Ä·¥Ä·¥õ·¥á·¥Ö  ô è  Ä…™·¥Ñ ú…¢·¥Ä…¢·¥Ä·¥ç…™·¥Ö·¥ús`
	 await Qr_Code_By_Wasi_Tech.sendMessage(Qr_Code_By_Wasi_Tech.user.id,{text:WASI_MD_TEXT},{quoted:session})



					await delay(100);
					await Qr_Code_By_Wasi_Tech.ws.close();
					return await removeFile("temp/" + id);
				} else if (connection === "close" && lastDisconnect && lastDisconnect.error && lastDisconnect.error.output.statusCode != 401) {
					await delay(10000);
					WASI_MD_QR_CODE();
				}
			});
		} catch (err) {
			if (!res.headersSent) {
				await res.json({
					code: "Service is Currently Unavailable"
				});
			}
			console.log(err);
			await removeFile("temp/" + id);
		}
	}
	return await WASI_MD_QR_CODE()
});
module.exports = router
